{"version":3,"sources":["chuckAvatar.png","components/appbar.js","reducer/AppReducer.js","context/GlobalState.js","components/categoryList.js","components/joke.js","components/loading.js","components/randomJoke.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AppBar","className","aria-label","state","action","type","category","payload","initialState","Joke","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","selectCategory","CategoryList_Query","gql","CategoryList","useContext","categorySelectHandler","event","categoryType","target","console","log","src","chuckAvatar","alt","width","height","query","loading","error","data","selectedCategory","categories","map","index","name","id","onChange","key","props","content","style","fontSize","Loading","role","RandomJOke_Query","qgl","React","memo","variables","getJoke","client","ApolloClient","uri","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e3ae86e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chuckAvatar.3de381c1.png\";","import React from 'react';\n\n// const root = {\n//     navbar: `navbar \n//            navbar-light\n//            bg-light`\n// };\n\n\nconst AppBar = () => {\n    return (\n        <div className=\"Col-12 mt-2\">\n            <nav aria-label=\"breadcrumb\" className=\"bg-gradient-light\">\n                <ol className=\"breadcrumb\">\n                    <li className=\"breadcrumb-item text-white\" >Chuck Norris</li>\n                </ol>\n            </nav>\n        </div>\n    )\n}\n\nexport default AppBar;\n\n\n","export default (state, action) => {\n    switch (action.type) {\n        case 'SELECT_CATEGORY':\n            return {\n             ...state,\n             category: state.category = action.payload\n            }\n        default:\n            return state;\n    }\n}","import React, { createContext, useReducer } from 'react';\nimport AppReducer from '../reducer/AppReducer'\n\n\n// Initial state \nconst initialState = {\n    category: \"movie\",\n    Joke: {}\n};\n\n// Create context \n\nexport const GlobalContext = createContext(initialState);\n\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions \n    function selectCategory(value) {\n        dispatch({\n            type: 'SELECT_CATEGORY',\n            payload: value\n        });\n    }\n\n\n    return (\n        <GlobalContext.Provider value={{\n            category: state.category,\n            selectCategory: selectCategory\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}\n\n","import React, { Fragment, useContext } from 'react';\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { GlobalContext } from '../context/GlobalState';\n\nimport chuckAvatar from \"../chuckAvatar.png\";\n\n\n\nconst CategoryList_Query = gql`\n query CatergoryListQuery {\n  categories {\n    name\n  }\n }\n`;\n\nconst CategoryList = () => {\n  const { category, selectCategory } = useContext(GlobalContext);\n\n  const categorySelectHandler = event => {\n    const categoryType = event.target.value;\n    console.log(categoryType);\n    selectCategory(categoryType);\n  }\n\n  return <div className=\"col-12\">\n    <div>\n      <img src={chuckAvatar} className=\"rounded-circle mx-auto d-block\" alt=\"chuck\"\n        width=\"150\"\n        height=\"150\"\n      />\n      <h5 className=\"text-center mt-1 text-justify\">Life is better when  you're laughing...</h5>\n    </div>\n\n    <Query query={CategoryList_Query}>\n      {\n        ({ loading, error, data }) => {\n          if (loading) return <h4>Loading...</h4>;\n          if (error) console.log(error);\n          const selectedCategory = data.categories\n            .map((category, index) => ({\n              name: category.name,\n              id: index + 1,\n            }));\n\n          return <Fragment>\n\n            <div className=\"mt-3 mb-2\">Select Category:</div>\n\n            <select\n              className=\"dropdown mt-0 btn btn-secondary btn-lg\"\n              onChange={categorySelectHandler}\n              value={category}\n            >\n              {\n                selectedCategory.map(category => (\n                  <option key={category.id} value={category.name}\n                    className=\"dropdown-item btn btn-secondary dropdown-menu \"\n                  >\n                    {category.name}\n                  </option>\n\n                ))\n\n              }\n\n            </select>\n\n          </Fragment>\n        }\n      }\n    </Query>\n\n  </div>\n}\n\nexport default CategoryList;\n\n","import React from 'react';\n\nconst Joke = props => {\n    const { content } = props.data;\n\n    return (\n        <div className=' col-6 justify-content-center'>\n            <div className=\"card-body d-flex align-items-center justify-content-center \">\n                <p className=\"card-text text-center display-6\" style={{fontSize:\"22px\"}}>{content}</p>\n            </div>\n\n        </div>\n\n    );\n};\n\nexport default Joke;\n\n","import React from 'react';\n\nconst Loading = () => {\n    return (\n        <div className=\"row justify-content-center mt-5\">\n            <div className=\"spinner-grow text-primary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-secondary\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-success\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <div className=\"spinner-grow text-danger\" role=\"status\">\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n        </div>\n    );\n}\n\nexport default Loading;","import React, { useContext, Fragment } from 'react';\nimport qgl from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { GlobalContext } from '../context/GlobalState';\n\nimport Joke from '../components/joke';\nimport Loading from '../components/loading';\n\n\nconst RandomJOke_Query = qgl`\nquery RandomJokeQuery($category: String!) {\n    getJoke(category: $category) {\n        content,\n        id,\n        url\n      }\n}\n`;\n\nconst RandomJoke = () => {\n  const { category } = useContext(GlobalContext);\n\n\n\n  return <Fragment>\n    <Query query={RandomJOke_Query} variables={{ category }}>\n      {\n        ({ loading, error, data }) => {\n          if (loading) return  <Loading />\n          if (error) console.log(error);\n\n          return <div className=\"row justify-content-center mt-5\">\n            <Joke data={data.getJoke} />\n          </div>\n        }\n      }\n    </Query>\n  </Fragment>\n\n}\n\nexport default React.memo(RandomJoke) \n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport './App.css';\n\nimport AppBar from './components/appbar';\nimport CategoryList from './components/categoryList';\nimport RandomJoke from './components/randomJoke';\nimport { GlobalProvider } from './context/GlobalState';\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nfunction App() {\n\n  return (\n    <ApolloProvider client={client}>\n      <div className=\"container\">\n        <AppBar />\n        <GlobalProvider>\n          <CategoryList />\n          <RandomJoke />\n        </GlobalProvider>\n\n      </div>\n\n\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}